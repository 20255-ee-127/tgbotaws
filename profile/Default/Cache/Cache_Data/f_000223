{"version":3,"file":"7768.31327683d86a7ca9d7c9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUnreadMentions,\n  addUsers,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateChats,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds, users, chats,\n      } = result;\n\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n      global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const offsetId = (resultsByType?.[type])?.nextOffsetId;\n  const offsetRate = (resultsByType?.[type])?.nextOffsetRate;\n  const offsetPeerId = (resultsByType?.[type])?.nextOffsetPeerId;\n\n  // Stop loading if we have all the messages\n  if (resultsByType?.[type]?.totalCount && resultsByType[type]!.totalCount! >= resultsByType[type]!.foundIds.length) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate,\n    offsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  const peerIds = result.users.map(({ id }) => id);\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    chats, users, messages,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectPeer,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (user.profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (peer.profilePhotos && !shouldInvalidateCache && (isPreload || !peer.profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = peer.profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, users, count, nextOffsetId,\n  } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      users, chats, accountResultIds, globalResultIds,\n    } = result;\n\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive || !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, appendStarsTransactions, closeInvoice,\n  openStarsTransactionFromReceipt,\n  openStarsTransactionModal,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users,\n  } = result;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPremiumGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const totalBoostUserList = [...boostListResult.users, ...boostListGiftResult.users];\n  global = addUsers(global, buildCollectionByKey(totalBoostUserList, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(status.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(status.users, 'id'));\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment, closeInvoice, openStarsTransactionModal, updatePayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n          profilePhotos: undefined,\n        });\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'starsgift') {\n          if (!inputInvoice.userId) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen\n            && areDeepEqual(inputInvoice.userId, starsModalState.forUserId)) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'stars') {\n          if (!inputInvoice.stars) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftModal = useModuleLoader(Bundles.Extra, 'PremiumGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftModal ? <PremiumGiftModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Extra, 'StarsGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (!asForwarded && calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\n\nimport { selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n    >\n      <div\n        className=\"message-content has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    return {\n      message,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport { getIsHeavyAnimating } from '../../hooks/useHeavyAnimationCheck';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onPinnedIntersectionChange,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isRepliesChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PremiumGiftModal from '../main/premium/PremiumGiftModal.async';\nimport StarsGiftModal from '../main/premium/StarsGiftModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isPremiumGiftModalOpen?: boolean;\n  isStarsGiftModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isPremiumGiftModalOpen,\n  isStarsGiftModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <PremiumGiftModal isOpen={isPremiumGiftModalOpen} />\n      <StarsGiftModal isOpen={isStarsGiftModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftModal, starsGiftModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isPremiumGiftModalOpen: giftModal?.isOpen,\n      isStarsGiftModalOpen: starsGiftModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp' |\n'starsTransactionModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  webApp: WebAppModal,\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Extra, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { FRAGMENT_ADS_URL } from '../../../config';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  canCollect?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  canCollect,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const hasAvailableBalance = Boolean(statistics?.balances?.availableBalance !== 0);\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const availableBalance = statistics?.balances?.availableBalance;\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}<span className={styles.decimalPart}>.{decimalTonPart}</span>\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}<span className={styles.decimalUsdPart}>.{decimalUsdPart}</span>\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {hasAvailableBalance && (\n        <div className={styles.section}>\n          {oldLang('lng_channel_earn_balance_title')}\n\n          {renderAvailableReward()}\n\n          <Button size=\"smaller\" type=\"button\" href={FRAGMENT_ADS_URL} disabled={canCollect && hasAvailableBalance}>\n            {oldLang('MonetizationWithdraw')}\n          </Button>\n\n          <div className={styles.textBottom}>{rewardsText}</div>\n        </div>\n      )}\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const canCollect = chat && chat.isCreator;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const statistics = tabState.statistics.monetization;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      canCollect,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingPickerModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingPickerModal ? <PremiumGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingPickerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Extra, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingPickerModal from './premium/PremiumGiftingPickerModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingPickerModal?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingPickerModal,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingPickerModal && <PremiumGiftingPickerModal isOpen={isPremiumGiftingPickerModal} />}\n      {isStarsGiftingPickerModal && <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      starsGiftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingPickerModal: giftingModal?.isOpen,\n      isStarsGiftingPickerModal: starsGiftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateUsers","updateChats","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","offsetRate","nextOffsetRate","offsetPeerId","nextOffsetPeerId","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","profilePhotos","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","chatIds","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","starsGiftingModal","transaction","getStarsTransactionFromGift","openStarsTransactionModal","forUserIds","giftModal","forUserId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","totalBoostUserList","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","starsTransactionModal","mediaIndex","isAvatarView","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","isNotJoined","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","photoId","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","PremiumGiftModal","StarsGiftModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","isRound","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isPremiumGiftModalOpen","isStarsGiftModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","WebAppModal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","StarsTransactionModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","selectPeerFullInfo","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","isSavedMessages","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","canCollect","monetization","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","hasAvailableBalance","balances","availableBalance","ensureLovelyChart","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","ready","isToncoin","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","FRAGMENT_ADS_URL","textBottom","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingPickerModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingPickerModal","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","prefix","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}