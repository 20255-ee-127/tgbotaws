{"version":3,"file":"2859.14d89f0b3b29a7e250a1.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType,\n  ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n\n  actions.loadFullChat({ chatId, force: true });\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    focusMessage({\n      chatId: toChannelId(chatOrChannelPostId),\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, text,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.oldTranslate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.oldTranslate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.oldTranslate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.oldTranslate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addChats(global, chatsById);\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { users, chats, chatLink } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = selectChatListLoadingParameters(global, listType);\n  const offsetPeer = !shouldReplace && params.nextOffsetPeerId\n    ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = !shouldReplace ? params.nextOffsetDate : undefined;\n  const offsetId = !shouldReplace ? params.nextOffsetId : undefined;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const topArchivedChats = getOrderedIds(ARCHIVED_FOLDER_ID)\n        ?.slice(0, GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT)\n        .map((chatId) => selectChat(global, chatId))\n        .filter(Boolean);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n      const chatsToSave = visibleChats.concat(topArchivedChats || []);\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(chatsToSave.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  global = replaceChatListLoadingParameters(\n    global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n  );\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","topArchivedChats","getOrderedIds","ARCHIVED_FOLDER_ID","slice","GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT","map","filter","Boolean","chatsToSave","flatMap","_ref9","currentChat","selectCurrentChat","concat","visibleUsers","_ref10","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref12","_key3","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref14","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref15","_key6","isChatBasicGroup","newChat","_len2","_ref11","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","_ref","folderAllOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","closeStarsBalanceModal","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","onReplace","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","isChatChannel","isChatSuperGroup","openBoostModal","webAppName","usernames","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","botId","_len4","_ref13","_key4","channelPostId","isCurrentChat","startBot","param","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}